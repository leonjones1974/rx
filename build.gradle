buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }    
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
    distributionUrl = 'http://services.gradle.org/distributions/gradle-2.2-bin.zip'
}



subprojects { p ->

    ext {
        pomFilePath = "${project.projectDir}/build/pom.xml"
        pomFile = file(pomFilePath)
    }

    configurations {
        pom
    }

    group = 'uk.camsw.rx'
    version = '1.0.0'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'signing'

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file('.idea-classes')
            testOutputDir = file('.idea-test-classes')
            downloadJavadoc = true
            downloadSources = true
            jdkName = '1.8'
        }
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://leonandjosh.ddns.net:8081/nexus/content/repositories/snapshots"
        }
        maven {
            url "http://leonandjosh.ddns.net:8081/nexus/content/repositories/releases"
        }
    }


    dependencies {
	    testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.11.1'
        testCompile 'junit:junit:4.11'
        testCompile 'org.assertj:assertj-core:3.0.0'
    }

    apply plugin: 'maven-publish'

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
        if (pomFile.exists()) {
            pom pomFile
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {
        sign configurations.archives
    }




    task signPom(type: Sign) {
        sign configurations.pom
    }
    def getPomSignature = {
        return project.tasks.signPom.signatureFiles.collect{it}[0]
    }
    if (project.ext.pomFile.exists()) {
        task preparePublication (dependsOn : [signJars, signPom])
    } else {
        task preparePublication (dependsOn : signJars)
    }


    task preparePublish(dependsOn: signJars)
    def getSignatureFiles = {
        def allFiles = project.tasks.signJars.signatureFiles.collect { it }
        def signedSources = allFiles.find { it.name.contains('-sources') }
        def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
        def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
        return [
                [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
                [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
                [archive: signedJar,     classifier: null,      extension: 'jar.asc']
        ]
    }

    publishing {
        publications {
            gpgJars(MavenPublication) {
                getSignatureFiles().each {signature ->
                    artifact (signature.archive) {
                        classifier = signature.classifier
                        extension  = signature.extension
                    }
                }
            }
            if (project.ext.pomFile.exists()) {
                gpgPom(MavenPublication) {
                    artifact (getPomSignature()) {
                        classifier = null
                        extension  = 'pom.asc'
                    }
                }
            }
            signatures (MavenPublication) {
                getSignatureFiles().each {signature ->
                    artifact (signature.archive) {
                        classifier = signature.classifier
                        extension  = signature.extension
                    }
                }
            }
            mavenJava(MavenPublication) {
                from components.java
                pom.withXml {

                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name 'Reactive Extensions Utils'
                        description 'Utils for working with RxJava'
                        url 'https://github.com/leonjones1974/rx'
                        scm {
                            url 'git@github.com:leonjones1974/rx.git'
                            connection 'scm:git:git@github.com:leonjones1974/rx.git'
                            developerConnection 'scm:git:git@github.com:leonjones1974/rx.git'
                        }
                        licenses {
                            license {
                                name 'MIT License'
                                url 'http://www.opensource.org/licenses/mit-license.php'
                            }
                        }
                        developers {
                            developer {
                                id 'leonjones1974'
                                name 'Leon Jones'
                                email 'leonj_24@yahoo.com'
                            }
                        }
                    }
                    if (!project.ext.pomFile.exists()) {
                        writeTo (project.ext.pomFile)
                    }
                }


                if (project.ext.pomFile.exists()) {
                    gpgPom(MavenPublication) {
                        artifact (getPomSignature()) {
                            classifier = null
                            extension  = 'pom.asc'
                        }
                    }
                }

                artifact sourceJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }

        repositories {
            maven {
                url "http://leonandjosh.ddns.net:8081/nexus/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
                credentials {
                    username nexusUser
                    password nexusPassword
                }
            }
        }
    }
    test {
        testLogging {
            events 'started', 'passed'
        }
    }

}





